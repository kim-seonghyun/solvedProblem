function calculateFactory(expression,operator){
   let reg = new RegExp(`(^-|\\*(?=-))*\\d+(${operator}(-)*\\d+)+`,'g');
    
    return expression.replace(reg,function(match){
       return eval(match);
   })
     
}

function solution(expression) {
    
    let operators =  [
        ['-', '*', '+'],
        ['-', '+', '*'],
        ['*', '-', '+'],
        ['*', '+', '-'],
        ['+', '-', '*'],
        ['+', '*', '-']
    ]
    let max = -Infinity;
    operators.forEach(arr=>{
        let tmpExpression = expression;
        arr.forEach(el=>{
            tmpExpression = calculateFactory(tmpExpression,'\\'+el);
        })
        tmpExpression = eval(tmpExpression);
        tmpExpression = Math.abs(tmpExpression);
        if(tmpExpression > max){
            max = tmpExpression;
        }
    })
    return max;              
    
}

//해결 

let operatorsCase = []
function recursive(arr, deep, r){
    if(deep == r){
        operatorsCase.push([...arr]);
        return arr
    }
    for(let i=deep; i<arr.length; i++){
        [arr[i],arr[deep]]  = [arr[deep],arr[i]];
        recursive(arr,deep+1,r);
        [arr[i],arr[deep]]  = [arr[deep],arr[i]];
    }
}

function solution(expression) {
    
    recursive(['-','*','+'],0,3);
   let result = [];
    expression = expression.split(/(\D)/);
    
    operatorsCase.forEach(operators=>{
        let tmp = [...expression];
        
        operators.forEach(operator=>{
            while(tmp.indexOf(operator) != -1){
                let index = tmp.indexOf(operator);
                tmp.splice(index-1,3,eval(tmp.slice(index-1,index+2).join('')));
            }
        })
        result.push(Math.abs(tmp));
    })
    return Math.max(...result)
}

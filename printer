const { expect } = require("chai");

//printer문제
function printContext(priorities) {
  this.priorities = priorities;
  this.count = 0;
  this.isFindStringValue = false;

  printContext.prototype.plusCount = function () {
    this.count++;
  };

  printContext.prototype.pop = function () {
    let priorities = this.priorities;
    let firstPriority = priorities.splice(0, 1)[0];

    for (let priority of priorities) {
      if (firstPriority < priority) {
        priorities.push(firstPriority);
        return;
      }
    }
    if (typeof firstPriority == "string") {
      this.isFindStringValue = true;
    }
    this.plusCount();
    return;
  };

  printContext.prototype.foundStringValue = function () {
    return this.isFindStringValue;
  };
  printContext.prototype.getResult = function () {
    return this.count;
  };
}

describe("프린터 문제", function () {
  it("결과는 1", function () {
    let priorities = [2, 1, 3, 2];
    let location = 2;
    priorities[location] = String(priorities[location]);
    let input = new printContext(priorities);

    while (!input.foundStringValue()) {
      input.pop();
    }

    expect(input.getResult()).eq(1);
  });
});
